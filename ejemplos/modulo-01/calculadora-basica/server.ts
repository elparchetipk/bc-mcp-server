#!/usr/bin/env node

/**
 * Servidor MCP de Calculadora B√°sica - D√≠as 1-2
 * Bootcamp MCP Server - De Zero a Hero
 *
 * Este es tu PRIMER servidor MCP. Est√° dise√±ado para ser simple y educativo.
 * Cada l√≠nea est√° comentada para que entiendas qu√© hace y por qu√©.
 *
 * üéØ Objetivo: Entender los conceptos fundamentales de MCP
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  type CallToolResult,
} from '@modelcontextprotocol/sdk/types.js';

/**
 * PASO 1: Crear el servidor MCP
 *
 * Aqu√≠ definimos la "identidad" de nuestro servidor:
 * - name: Como se identifica nuestro servidor
 * - version: Para control de versiones
 * - capabilities: Qu√© funcionalidades ofrece
 */
const server = new Server(
  {
    name: 'calculadora-basica-mcp',
    version: '1.0.0',
  },
  {
    capabilities: {
      // Le decimos a MCP que tenemos herramientas disponibles
      tools: {},
    },
  }
);

/**
 * PASO 2: Definir qu√© herramientas tenemos disponibles
 *
 * Cuando Claude pregunta "¬øqu√© puedes hacer?", respondemos con esta lista.
 * Es como el men√∫ de un restaurante: muestra todas las opciones disponibles.
 */
server.setRequestHandler(ListToolsRequestSchema, async () => {
  console.log('üìã Cliente solicita lista de herramientas disponibles');

  return {
    tools: [
      {
        name: 'sumar',
        description: 'Suma dos n√∫meros y retorna el resultado',
        inputSchema: {
          type: 'object',
          properties: {
            a: {
              type: 'number',
              description: 'Primer n√∫mero para la suma',
            },
            b: {
              type: 'number',
              description: 'Segundo n√∫mero para la suma',
            },
          },
          required: ['a', 'b'],
        },
      },
      {
        name: 'restar',
        description: 'Resta el segundo n√∫mero del primero',
        inputSchema: {
          type: 'object',
          properties: {
            a: {
              type: 'number',
              description: 'N√∫mero del cual restar',
            },
            b: {
              type: 'number',
              description: 'N√∫mero a restar',
            },
          },
          required: ['a', 'b'],
        },
      },
      {
        name: 'multiplicar',
        description: 'Multiplica dos n√∫meros',
        inputSchema: {
          type: 'object',
          properties: {
            a: {
              type: 'number',
              description: 'Primer n√∫mero',
            },
            b: {
              type: 'number',
              description: 'Segundo n√∫mero',
            },
          },
          required: ['a', 'b'],
        },
      },
      {
        name: 'dividir',
        description: 'Divide el primer n√∫mero entre el segundo',
        inputSchema: {
          type: 'object',
          properties: {
            a: {
              type: 'number',
              description: 'N√∫mero a dividir (dividendo)',
            },
            b: {
              type: 'number',
              description: 'N√∫mero por el cual dividir (divisor)',
            },
          },
          required: ['a', 'b'],
        },
      },
    ],
  };
});

/**
 * PASO 3: Manejar las llamadas a herramientas
 *
 * Cuando Claude dice "usa la herramienta X con estos par√°metros",
 * esta funci√≥n se ejecuta. Es el "cerebro" de nuestro servidor.
 */
server.setRequestHandler(
  CallToolRequestSchema,
  async (request): Promise<CallToolResult> => {
    const { name, arguments: args } = request.params;

    console.log(`üîß Ejecutando herramienta: ${name}`);
    console.log(`üìä Par√°metros recibidos:`, args);

    try {
      // Verificamos qu√© herramienta nos est√°n pidiendo
      switch (name) {
        case 'sumar': {
          // Validamos que tengamos los n√∫meros necesarios
          const { a, b } = args as { a: number; b: number };

          if (typeof a !== 'number' || typeof b !== 'number') {
            throw new Error('Los par√°metros a y b deben ser n√∫meros');
          }

          const resultado = a + b;
          console.log(`‚ûï Suma: ${a} + ${b} = ${resultado}`);

          return {
            content: [
              {
                type: 'text',
                text:
                  `La suma de ${a} + ${b} es igual a ${resultado}.\n\n` +
                  `Explicaci√≥n paso a paso:\n` +
                  `‚Ä¢ Primer n√∫mero: ${a}\n` +
                  `‚Ä¢ Segundo n√∫mero: ${b}\n` +
                  `‚Ä¢ Operaci√≥n: suma (+)\n` +
                  `‚Ä¢ Resultado: ${resultado}`,
              },
            ],
          };
        }

        case 'restar': {
          const { a, b } = args as { a: number; b: number };

          if (typeof a !== 'number' || typeof b !== 'number') {
            throw new Error('Los par√°metros a y b deben ser n√∫meros');
          }

          const resultado = a - b;
          console.log(`‚ûñ Resta: ${a} - ${b} = ${resultado}`);

          return {
            content: [
              {
                type: 'text',
                text:
                  `La resta de ${a} - ${b} es igual a ${resultado}.\n\n` +
                  `Explicaci√≥n paso a paso:\n` +
                  `‚Ä¢ Minuendo: ${a}\n` +
                  `‚Ä¢ Sustraendo: ${b}\n` +
                  `‚Ä¢ Operaci√≥n: resta (-)\n` +
                  `‚Ä¢ Resultado: ${resultado}`,
              },
            ],
          };
        }

        case 'multiplicar': {
          const { a, b } = args as { a: number; b: number };

          if (typeof a !== 'number' || typeof b !== 'number') {
            throw new Error('Los par√°metros a y b deben ser n√∫meros');
          }

          const resultado = a * b;
          console.log(`‚úñÔ∏è Multiplicaci√≥n: ${a} √ó ${b} = ${resultado}`);

          return {
            content: [
              {
                type: 'text',
                text:
                  `La multiplicaci√≥n de ${a} √ó ${b} es igual a ${resultado}.\n\n` +
                  `Explicaci√≥n paso a paso:\n` +
                  `‚Ä¢ Primer factor: ${a}\n` +
                  `‚Ä¢ Segundo factor: ${b}\n` +
                  `‚Ä¢ Operaci√≥n: multiplicaci√≥n (√ó)\n` +
                  `‚Ä¢ Resultado: ${resultado}`,
              },
            ],
          };
        }

        case 'dividir': {
          const { a, b } = args as { a: number; b: number };

          if (typeof a !== 'number' || typeof b !== 'number') {
            throw new Error('Los par√°metros a y b deben ser n√∫meros');
          }

          // ¬°Importante! Verificamos divisi√≥n por cero
          if (b === 0) {
            throw new Error(
              'No se puede dividir por cero. El divisor (b) debe ser diferente de 0.'
            );
          }

          const resultado = a / b;
          console.log(`‚ûó Divisi√≥n: ${a} √∑ ${b} = ${resultado}`);

          return {
            content: [
              {
                type: 'text',
                text:
                  `La divisi√≥n de ${a} √∑ ${b} es igual a ${resultado}.\n\n` +
                  `Explicaci√≥n paso a paso:\n` +
                  `‚Ä¢ Dividendo: ${a}\n` +
                  `‚Ä¢ Divisor: ${b}\n` +
                  `‚Ä¢ Operaci√≥n: divisi√≥n (√∑)\n` +
                  `‚Ä¢ Resultado: ${resultado}`,
              },
            ],
          };
        }

        default:
          throw new Error(`Herramienta desconocida: ${name}`);
      }
    } catch (error) {
      console.error(`‚ùå Error ejecutando ${name}:`, error);

      return {
        content: [
          {
            type: 'text',
            text:
              `Error al ejecutar la herramienta '${name}': ${error.message}\n\n` +
              `Consejos para solucionarlo:\n` +
              `‚Ä¢ Verifica que los n√∫meros sean v√°lidos\n` +
              `‚Ä¢ No dividas por cero\n` +
              `‚Ä¢ Aseg√∫rate de usar n√∫meros, no texto`,
          },
        ],
        isError: true,
      };
    }
  }
);

/**
 * PASO 4: Iniciar el servidor
 *
 * Esta parte "enciende" nuestro servidor y lo prepara para recibir peticiones.
 * Es como abrir la puerta de la tienda para que entren los clientes.
 */
async function main() {
  console.log('üöÄ Iniciando Calculadora B√°sica MCP Server...');
  console.log('üìö M√≥dulo 1 - D√≠as 1-2: Fundamentos MCP');

  // Creamos el transport (la "conexi√≥n" con Claude)
  const transport = new StdioServerTransport();

  // Conectamos el servidor con el transport
  await server.connect(transport);

  console.log('‚úÖ Servidor iniciado correctamente');
  console.log(
    'üîß Herramientas disponibles: sumar, restar, multiplicar, dividir'
  );
  console.log('üìû Listo para recibir peticiones de Claude...\n');
}

/**
 * PASO 5: Manejo de errores globales
 *
 * Si algo sale muy mal, estos manejadores nos ayudan a entender qu√© pas√≥
 * y evitan que el servidor se "cuelgue".
 */
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Error no manejado en Promise:', promise, 'raz√≥n:', reason);
});

process.on('uncaughtException', error => {
  console.error('‚ùå Excepci√≥n no capturada:', error);
  process.exit(1);
});

// ¬°Ejecutar el servidor!
main().catch(error => {
  console.error('üí• Error fatal al iniciar el servidor:', error);
  process.exit(1);
});
