name: üè∑Ô∏è Release & Changelog

# Este workflow automatiza la creaci√≥n de releases y actualizaci√≥n del changelog
# Se ejecuta cuando se crea un tag que siga el patr√≥n v*.*.* (ej: v1.0.0)
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Versi√≥n del release (ej: v1.0.0)'
        required: true
        type: string

# Permisos necesarios
permissions:
  contents: write
  discussions: write

jobs:
  # 1. Validar y preparar release
  prepare-release:
    name: üìã Preparar Release
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para generar changelog completo

      - name: üè∑Ô∏è Extraer informaci√≥n de versi√≥n
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.version }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi

          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          # Determinar si es pre-release
          if [[ $VERSION == *"alpha"* ]] || [[ $VERSION == *"beta"* ]] || [[ $VERSION == *"rc"* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

          echo "üè∑Ô∏è Preparando release $TAG (versi√≥n: $VERSION)"

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: üì• Instalar dependencias
        run: pnpm install --frozen-lockfile

      - name: üèóÔ∏è Build del proyecto
        run: pnpm run build

      - name: üß™ Ejecutar tests
        run: pnpm run test

      - name: ‚úÖ Validar que todo est√° listo
        run: |
          echo "‚úÖ Build completado"
          echo "‚úÖ Tests pasaron"
          echo "‚úÖ Listo para release"

  # 2. Generar changelog autom√°tico
  generate-changelog:
    name: üìù Generar Changelog
    runs-on: ubuntu-latest
    needs: prepare-release

    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìù Generar changelog
        id: changelog
        run: |
          # Usar nuestro script personalizado de changelog
          ./scripts/update-changelog.sh

          # Extraer las novedades desde el √∫ltimo tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "üìù Primer release - generando changelog completo"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "üìù Generando changelog desde $LAST_TAG"
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Organizar por tipo de commit
          echo "## üöÄ Novedades en ${{ needs.prepare-release.outputs.tag }}" > release-notes.md
          echo "" >> release-notes.md

          # Features
          FEATURES=$(echo "$CHANGELOG" | grep -E "^- feat|^- feature" | sed 's/^- feat/- ‚ú®/' | sed 's/^- feature/- ‚ú®/' || true)
          if [ ! -z "$FEATURES" ]; then
            echo "### ‚ú® Nuevas Funcionalidades" >> release-notes.md
            echo "$FEATURES" >> release-notes.md
            echo "" >> release-notes.md
          fi

          # Fixes
          FIXES=$(echo "$CHANGELOG" | grep -E "^- fix|^- bugfix" | sed 's/^- fix/- üêõ/' | sed 's/^- bugfix/- üêõ/' || true)
          if [ ! -z "$FIXES" ]; then
            echo "### üêõ Correcciones" >> release-notes.md
            echo "$FIXES" >> release-notes.md
            echo "" >> release-notes.md
          fi

          # Docs
          DOCS=$(echo "$CHANGELOG" | grep -E "^- docs" | sed 's/^- docs/- üìö/' || true)
          if [ ! -z "$DOCS" ]; then
            echo "### üìö Documentaci√≥n" >> release-notes.md
            echo "$DOCS" >> release-notes.md
            echo "" >> release-notes.md
          fi

          # Chores
          CHORES=$(echo "$CHANGELOG" | grep -E "^- chore|^- refactor|^- style" | sed 's/^- chore/- üîß/' | sed 's/^- refactor/- ‚ôªÔ∏è/' | sed 's/^- style/- üíÑ/' || true)
          if [ ! -z "$CHORES" ]; then
            echo "### üîß Mantenimiento" >> release-notes.md
            echo "$CHORES" >> release-notes.md
            echo "" >> release-notes.md
          fi

          # Agregar informaci√≥n adicional
          echo "---" >> release-notes.md
          echo "" >> release-notes.md
          echo "### üì¶ Instalaci√≥n" >> release-notes.md
          echo "" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "git clone https://github.com/\${{ github.repository }}.git" >> release-notes.md
          echo "cd \$(basename \${{ github.repository }})" >> release-notes.md
          echo "git checkout ${{ needs.prepare-release.outputs.tag }}" >> release-notes.md
          echo "pnpm install" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          echo "" >> release-notes.md
          echo "### üê≥ Docker" >> release-notes.md
          echo "" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "docker compose up -d" >> release-notes.md
          echo "\`\`\`" >> release-notes.md

          # Guardar changelog para usar en el release
          CHANGELOG_CONTENT=$(cat release-notes.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üì§ Subir release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release-notes.md

  # 3. Crear release en GitHub
  create-release:
    name: üöÄ Crear Release
    runs-on: ubuntu-latest
    needs: [prepare-release, generate-changelog]

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4

      - name: üì• Descargar release notes
        uses: actions/download-artifact@v3
        with:
          name: release-notes

      - name: üöÄ Crear release en GitHub
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.tag }}
          release_name: Release ${{ needs.prepare-release.outputs.tag }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}

  # 4. Actualizar documentaci√≥n post-release
  update-docs:
    name: üìö Actualizar Documentaci√≥n
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]

    steps:
      - name: üì• Checkout c√≥digo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìù Actualizar versi√≥n en documentaci√≥n
        run: |
          # Actualizar badges de versi√≥n en README
          sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+/version-${{ needs.prepare-release.outputs.version }}/g" README.md

          # Actualizar referencias de versi√≥n en docs
          find docs -name "*.md" -exec sed -i "s/version [0-9]\+\.[0-9]\+\.[0-9]\+/version ${{ needs.prepare-release.outputs.version }}/g" {} \;

      - name: üì§ Commit cambios de documentaci√≥n
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git diff --staged --quiet || git commit -m "docs: actualizar versi√≥n a ${{ needs.prepare-release.outputs.tag }}"
          git push

  # 5. Notificar en discusiones
  notify:
    name: üì¢ Notificar Comunidad
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: needs.prepare-release.outputs.is_prerelease == 'false'

    steps:
      - name: üì¢ Crear discusi√≥n para el release
        uses: actions/github-script@v6
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: '${{ needs.prepare-release.outputs.tag }}'
            });

            const discussionBody = `¬°Nueva versi√≥n disponible! üéâ

            ## ${release.name}

            ${release.body}

            ### üí¨ ¬øQu√© opinas?

            - ¬øHas probado las nuevas funcionalidades?
            - ¬øTienes feedback sobre los cambios?
            - ¬øHay algo que te gustar√≠a ver en la pr√≥xima versi√≥n?

            ¬°Comparte tu experiencia en los comentarios! üëá`;

            github.rest.teams.createDiscussionInOrg({
              org: context.repo.owner,
              team_slug: 'bootcamp-community',
              title: `üöÄ Release ${release.tag_name}`,
              body: discussionBody
            }).catch(() => {
              console.log('No se pudo crear discusi√≥n en equipo, continuando...');
            });
